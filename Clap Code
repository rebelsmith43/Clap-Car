int trigPin = 7; //Sets trig on proximity sensor to pin 7    
int echoPin = 10; //Sets echo on proximity sensor to pin 10
long duration, cm; //Sets proximity sensor to measure in cm
int soundDetectedPin = 5; // Use Pin 5 as our Input
int soundDetectedVal = HIGH; // This is where we record our Sound Measurement
boolean bAlarm = false;
unsigned long lastSoundDetectTime; // Record the time that we measured a sound
int soundAlarmTime = 5000; // Number of milli seconds to keep the sound alarm high
void setup ()
{
  pinMode(trigPin, OUTPUT); //Defines output on proximity sensor
  pinMode(echoPin, INPUT); //Defines input on proximity sensor
  pinMode(12, OUTPUT); //Sets output pin on motor A direction
  pinMode(9, OUTPUT); //Sets output pin on motor A breaks
  pinMode(13, OUTPUT); //Sets output pin on motor B direction
  pinMode(8, OUTPUT);  //Sets output pin on motor B breaks
  pinMode (soundDetectedPin, INPUT) ; // input from the Sound Detection Module
  Serial.begin(9600);  
}
void loop ()
{
  digitalWrite(trigPin, LOW);
  delayMicroseconds(5);
  digitalWrite(trigPin, HIGH);
  delayMicroseconds(10);
  digitalWrite(trigPin, LOW);
  pinMode(echoPin, INPUT);
  duration = pulseIn(echoPin, HIGH);
  cm = (duration/2) / 29.1;
  soundDetectedVal = digitalRead (soundDetectedPin) ; // read the sound alarm time
  if (soundDetectedVal == LOW) // If we hear a sound
  {
    lastSoundDetectTime = millis(); // record the time of the sound alarm
    // The following is so you don't scroll on the output screen
if (!bAlarm){
      Serial.println("Loud");
      bAlarm = true;
      digitalWrite(12, LOW); //Sets motor A backwards 
      digitalWrite(9, LOW); //Sets motor A break off
      analogWrite(3, 255); //Sets motor A speed
      digitalWrite(13, HIGH); //Sets motor B forwards
      digitalWrite(9, LOW); //Sets motor B break off
      analogWrite(11, 255); //Sets motor B speed
      delay(588); //Spins for 1.17 seconds
      digitalWrite(12, LOW); //Sets motor A backwards
      digitalWrite(9, LOW); //Sets motor A break on
      analogWrite(3, 0); //Sets motor A speed
      digitalWrite(13, LOW); //Sets motor B backwards
      digitalWrite(8, LOW); //Sets motor B break on
      analogWrite(11, 0); //Sets motor B speed
    }
  }
  else {
    if( (millis()-lastSoundDetectTime) > soundAlarmTime  &&  bAlarm){
      Serial.println("Quiet");
      bAlarm = false;
      digitalWrite(12, HIGH); //Sets motor A forwards
      digitalWrite(9, LOW); //Sets motor A break off  
      analogWrite(3, 255); //Sets motor A speed   
      digitalWrite(13, HIGH); //Sets motor B forwards
      digitalWrite(8, LOW); //Sets motor B break off  
      analogWrite(11, 255); //Sets motor B speed
     }
  }
  if (cm <= 15) { //If less than or equal to 15 cm
      digitalWrite(12, LOW); //Sets motor A backwards 
      digitalWrite(9, LOW); //Sets motor A break off
      analogWrite(3, 255); //Sets motor A speed
      digitalWrite(13, LOW); //Sets motor B backwards
      digitalWrite(8, LOW); //Sets motor B break off
      analogWrite(11, 255); //Sets motor B speed
      delay(1000); //Runs motor back for 0.5 sec
      digitalWrite(12, LOW); //Sets motor A backwards 
      digitalWrite(9, LOW); //Sets motor A break off
      analogWrite(3, 255); //Sets motor A speed
      digitalWrite(13, HIGH); //Sets motor B forwards
      digitalWrite(9, LOW); //Sets motor B break off
      analogWrite(11, 255); //Sets motor B speed
      delay(294); //Spins for  seconds
      digitalWrite(12, HIGH); //Sets motor A forwards
      digitalWrite(9, LOW); //Sets motor A break off  
      analogWrite(3, 255); //Sets motor A speed   
      digitalWrite(13, HIGH); //Sets motor B forwards
      digitalWrite(8, LOW); //Sets motor B break off  
      analogWrite(11, 255); //Sets motor B speed
  }
}
